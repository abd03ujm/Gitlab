workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

stages:
  - pre-build
  - build
  - test

# pre-build stage
.pre-build:
  stage: pre-build
  image: $PODMAN_IMAGE
  before_script:
    # Step 0: load entries from MANIFEST_FILE and expose them as variables
    - 'if [ -f "$MANIFEST_FILE" ]; then export $(grep -v "^#" $MANIFEST_FILE | xargs); fi'  
    - CI_APPLICATION_REPOSITORY="$ARTIFACTORY_REPOSITORY/$PROJECT_NAME"
  script:


    - |
      if [ -z "$$RELEASE_TAG" ]; then
        FINAL_IMAGE="$CI_APPLICATION_REPOSITORY:$RElEASE_TAG"
        echo "Setting image tag to $FINAL_IMAGE"  based on RELEASE_TAG... "
      else
        if [ "$SOFTWARE_TYPE" = "node" ]; then
          echo "Setting image tag based on BUILD_VERSION..."
          if [ -z "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}"
            TAG="${SOFTWARE_VERSION}"
          else
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
          fi
        elif [ "$SOFTWARE_TYPE" = "java" ]; then
          echo "Setting image tag based on RUN_TIME..."
          if [ -z "$RUN_TIME" ] && [ -n "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
          elif [ -n "$RUN_TIME" ] && [ -z "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}"
            TAG="$RUN_TIME-${SOFTWARE_VERSION}"
          else
            FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
          fi
        fi

        echo "FINAL_IMAGE: $FINAL_IMAGE"
        echo "TAG: $TAG"
      fi 
    

    - |
      docker_find_image_by_tag() {
        
            repo=$1
            path=$2

            # Conversion to JSON
            json_string=$(printf 'items.find({"repo": { "$eq": "%s" }},
                {"path": { "$match": "%s" }})
                .sort({ "$desc": ["created"]})
                .limit(1)' "$repo" "$path" )

            if ! [ -z "$TRACE" ]; then
                echo $json_string
            fi

            token=$(curl -s https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)

            response=$(curl -s -H "Content-Type: text/plain"  \
                -X POST -d "$json_string" \
                -u "$ARTIFACTORY_USER:$token" "https://artifacts.hyattdev.com/artifactory/api/search/aql")

            match=$(echo $response | jq -r '.results[0].path')
            
            if [ "$match" == "null" ]; then
                image_found="0"
            else
                image_found="$match"
            fi

      }
      docker_find_image_by_tag "$RELEASE_TAG" "$CI_APPLICATION_REPOSITORY"
  rules:
    - changes:
        - "${DIR_STRUCTURE}/*"

        
# build stage
.build:
  stage: build
  image:
    name: docker.hyattdev.com/docker/poc/base-images/podman:v1  # Use a Debian-based image (or switch to Fedora for better Podman support)
    entrypoint: [""]
  before_script:
    # Step 0: load entries from MANIFEST_FILE and expose them as variables
    - 'if [ -f "$MANIFEST_FILE" ]; then export $(grep -v "^#" $MANIFEST_FILE | xargs); fi'
    - CI_APPLICATION_REPOSITORY="$ARTIFACTORY_REPOSITORY/$PROJECT_NAME"

  script:
    - |
      if [ -z "$$RELEASE_TAG" ]; then
        FINAL_IMAGE="$CI_APPLICATION_REPOSITORY:$RElEASE_TAG"
        echo "Setting image tag to $FINAL_IMAGE"  based on RELEASE_TAG... "
      else
        if [ "$SOFTWARE_TYPE" = "node" ]; then
          echo "Setting image tag based on BUILD_VERSION..."
          if [ -z "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}"
            TAG="${SOFTWARE_VERSION}"
          else
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
          fi
        elif [ "$SOFTWARE_TYPE" = "java" ]; then
          echo "Setting image tag based on RUN_TIME..."
          if [ -z "$RUN_TIME" ] && [ -n "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
          elif [ -n "$RUN_TIME" ] && [ -z "$BUILD_VERSION" ]; then
            FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}"
            TAG="$RUN_TIME-${SOFTWARE_VERSION}"
          else
            FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
            TAG="$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
          fi
        fi

        echo "FINAL_IMAGE: $FINAL_IMAGE"
        echo "TAG: $TAG"
      fi 
    # Step 2: Build the image
    - |
      ls -lrt ${DIR_STRUCTURE}/Dockerfile
      cd ${DIR_STRUCTURE}
      echo "Building image: ${FINAL_IMAGE}"
      podman build -t "${FINAL_IMAGE}" .
      podman images  

    # Step 3: Run the container and capture version info
    - |
      podman run --rm -v $(pwd):/usr/src/app "${FINAL_IMAGE}" sh /usr/src/app/scripts/validate.sh
      echo "Versions match. Proceeding with push."

    #pushing to jfrog
    - |
      echo "Pushing image to JFrog..."
      echo "Logging into JFrog"
      ARTIFACTORY_USER=jenkins_upload
      token=$(wget -O- --quiet --no-check-certificate https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)     
      echo "$token" | podman login -u "$ARTIFACTORY_USER" --password-stdin "$ARTIFACTORY_URL"
      podman push "$FINAL_IMAGE"  
  rules:
    - changes:
        - "${DIR_STRUCTURE}/*"

