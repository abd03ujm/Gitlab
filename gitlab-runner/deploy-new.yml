variables:
  AUTO_BUILD_IMAGE_VERSION: 'v1.21.0'
  PODMAN_IMAGE: 'docker.hyattdev.com/docker/alpine-podman:5.3.2_12'
  REGISTRY: "$CI_REGISTRY"
  ARTIFACTORY_USER: jenkins_upload
  ARTIFACTORY_REGISTRY: docker.hyattdev.com
  ARTIFACTORY_PROJECT: docker
  PROJECT_NAME: "alpine-jay"
  ARTIFACTORY_REPOSITORY: "$ARTIFACTORY_REGISTRY/$ARTIFACTORY_PROJECT"
  ARTIFACTORY_URL: "https://$ARTIFACTORY_REGISTRY"
  PODMAN_IGNORE_CGROUPSV1_WARNING: "true"
  INDIVIDUAL_TAG: $RELEASE_TAG

.image-deploy:
  stage: deploy
  image: "$PODMAN_IMAGE"
    # name: docker.hyattdev.com/docker/poc/base-images/podman:v1
    # entrypoint: [""]

  script:
    # Step 1: Extract version details from manifest
    - |
      if [ -f "$DIR_STRUCTURE/manifest" ]; then
        SOFTWARE_VERSION=$(awk '/SOFTWARE_VERSION/{print $2}' $DIR_STRUCTURE/manifest)
        ALPINE_VERSION=$(awk '/ALPINE_VERSION/{print $2}' $DIR_STRUCTURE/manifest)
        BUILD_VERSION=$(awk '/BUILD_VERSION/{print $2}' $DIR_STRUCTURE/manifest)
        RUN_TIME=$(awk '/RUN_TIME/{print $2}' $DIR_STRUCTURE/manifest)
        SOFTWARE_TYPE=$(awk '/SOFTWARE_TYPE/{print $2}' $DIR_STRUCTURE/manifest)
        echo "SOFTWARE_VERSION: ${SOFTWARE_VERSION}"
        echo "BUILD_VERSION: ${BUILD_VERSION}"
      else
        echo "Manifest file not found! Exiting..."
        exit 1
      fi

    # Step 2: Define FINAL_IMAGE and TAG based on SOFTWARE_TYPE
    - |
      if [ "$SOFTWARE_TYPE" = "node" ]; then
        echo "Setting image tag based on BUILD_VERSION..."
        if [ -z "$BUILD_VERSION" ]; then
          FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}"
          TAG="${SOFTWARE_VERSION}"
        else
          FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
          TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
        fi
      elif [ "$SOFTWARE_TYPE" = "java" ]; then
        echo "Setting image tag based on RUN_TIME..."
        if [ -z "$RUN_TIME" ] && [ -n "$BUILD_VERSION" ]; then
          FINAL_IMAGE="$IMAGE_PATH:${SOFTWARE_VERSION}-${BUILD_VERSION}"
          TAG="${SOFTWARE_VERSION}-${BUILD_VERSION}"
        elif [ -n "$RUN_TIME" ] && [ -z "$BUILD_VERSION" ]; then
          FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}"
          TAG="$RUN_TIME-${SOFTWARE_VERSION}"
        else
          FINAL_IMAGE="$IMAGE_PATH:$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
          TAG="$RUN_TIME-${SOFTWARE_VERSION}-${BUILD_VERSION}"
        fi
      fi

      echo "FINAL_IMAGE: $FINAL_IMAGE"
      echo "TAG: $TAG"

    # Step 3: Define image promotion functions
    - |
      image_found=""

      docker_find_image_by_tag() {
        
        repo=$1
        path=$2

        # Conversion to JSON
        json_string=$(printf 'items.find({"repo": { "$eq": "%s" }},
            {"path": { "$match": "%s" }})
            .sort({ "$desc": ["created"]})
            .limit(1)' "$repo" "$path" )

        if ! [ -z "$TRACE" ]; then
          echo $json_string
        fi

        token=$(curl -s https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)

        response=$(curl -s -H "Content-Type: text/plain"  \
            -X POST -d "$json_string" \
            -u "$ARTIFACTORY_USER:$token" "https://artifacts.hyattdev.com/artifactory/api/search/aql")

        match=$(echo $response | jq '.results[0].path')
        
        if [[ "$match" == "null" ]]; then
          image_found="0"
        else
          image_found="1"
        fi

      }
      
      # promote a docker image to dockerv2-prod
      docker_promote() {
        # $1 - sourcetag, $2 - targetTag, 

        targetRepo=dockerv2-prod
        dockerRepo=$ARTIFACTORY_PROJECT/$PROJECT_NAME
        sourceTag=$1
        targetTag=$2

        # Conversion to JSON
        json_string=$(printf '{
            "targetRepo": "%s",
            "dockerRepository": "%s",
            "tag": "%s",
            "targetTag": "%s",
            "copy": "false"
        }' "$targetRepo" "$dockerRepo" "$sourceTag" "$targetTag" )

        token=$(curl -s https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)

        curl -s -H "Content-Type: application/json"  \
            -X POST -d "$json_string" \
            -u "$ARTIFACTORY_USER:$token" "https://artifacts.hyattdev.com/artifactory/api/docker/dockerv2-local/v2/promote"
      }


    # Step 4: Pull and Promote Image
    - |
      echo "Pulling source image: $FINAL_IMAGE"
      docker pull --quiet "$FINAL_IMAGE"

      CI_APPLICATION_REPOSITORY="$ARTIFACTORY_REPOSITORY/$PROJECT_NAME"

      if [[ "$INDIVIDUAL_TAG" == *","* ]]; then
        echo "$INDIVIDUAL_TAG" | tr ',' '\n' | while IFS= read -r INDIVIDUAL_TAG; do
          found=$(docker_find_image_by_tag "dockerv2-prod" "$ARTIFACTORY_PROJECT/$PROJECT_NAME/$INDIVIDUAL_TAG")

          if [[ "$found" -eq 1 ]]; then
            echo "Image with tag '$INDIVIDUAL_TAG' already exists in prod. Skipping."
          else
            docker images
            echo "step-1"
            token=$(curl -s https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)
            docker login docker.hyattdev.com  -u jenkins_upload -p $token
            echo "Tagging and pushing image with tag: $INDIVIDUAL_TAG"
            echo docker tag "$FINAL_IMAGE" "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"
            docker tag "$FINAL_IMAGE" "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"

            echo docker push "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"
            docker push "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"

            echo docker_promote "$INDIVIDUAL_TAG" "$INDIVIDUAL_TAG"
            docker_promote "$INDIVIDUAL_TAG" "$INDIVIDUAL_TAG"
            docker images
          fi
        done
      else
        found=$(docker_find_image_by_tag "dockerv2-prod" "$ARTIFACTORY_PROJECT/$PROJECT_NAME/$INDIVIDUAL_TAG")

        if [[ "$found" -eq 1 ]]; then
          echo "Image with tag '$INDIVIDUAL_TAG' already exists in prod. Skipping."
        else
          docker images
          echo "step-2"
          token=$(curl -s https://svc-cicd-tools.k8.nprd.hyattsys.net/artifactory/token)
          docker login docker.hyattdev.com  -u jenkins_upload -p $token
          echo "Tagging and pushing image with tag: $INDIVIDUAL_TAG"
          echo docker tag "$FINAL_IMAGE" "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"
          docker tag "$FINAL_IMAGE" "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"

          echo docker push "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"
          docker push "$CI_APPLICATION_REPOSITORY:$INDIVIDUAL_TAG"

          echo docker_promote "$INDIVIDUAL_TAG" "$INDIVIDUAL_TAG"
          docker_promote "$INDIVIDUAL_TAG" "$INDIVIDUAL_TAG"
          docker images
        fi
      fi

  rules:
    - if: '$CI_COMMIT_REF_NAME == "FT-develop"'
      changes:
        - "${DIR_STRUCTURE}/manifest"
        - "${DIR_STRUCTURE}/Dockerfile"
      when: manual
    - when: never
