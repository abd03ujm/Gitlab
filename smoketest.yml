stages:
  - generate_matrix
  - build
  - smoke_test

variables:
  ARTIFACTORY_USER: 2501440
  ARTIFACTORY_URL: "https://docker.hyattdev.com"
  IMAGE_NAME: docker.hyattdev.com/docker/poc/base-images/alpine

# Step 1: Generate NODE_MATRIX dynamically
generate_matrix:
  stage: build
  image: alpine:latest
  script:
    - apk add --no-cache jq
    - NODE_VERSIONS=$(awk '{printf "\"%s\", ", $0}' node_versions.txt)
    - NODE_VERSIONS="[${NODE_VERSIONS%, }]"  # Remove trailing comma and wrap in brackets
    - echo "NODE_MATRIX=$NODE_VERSIONS" >> variables.env  # Save as environment variable
  artifacts:
    reports:
      dotenv: variables.env  # Export for use in other jobs
# Step 2: Build Docker Images in Parallel
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  parallel:
    matrix:
      - NODE_DIR: $NODE_MATRIX  # Use dynamically generated list from generate_matrix

  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$ARTIFACTORY_URL\":{\"username\":\"$ARTIFACTORY_USER\",\"password\":\"$ARTIFACTORY_PASSWORD\"}}}" > /kaniko/.docker/config.json

  script: 
    - echo "CI_PROJECT_DIR - ${CI_PROJECT_DIR}"
    - echo "NODE_DIR - ${NODE_DIR}"
    - echo "Checking Dockerfile Path - ${CI_PROJECT_DIR}/${NODE_DIR}/Dockerfile"
    - ls -al "${CI_PROJECT_DIR}/${NODE_DIR}"
    
    - NODE_VERSION=$(awk '/ENV NODE_VERSION/{print $3}' $NODE_DIR/Dockerfile | tr -d '[:space:]') 
    - echo  "NODE_VERSION - ${NODE_VERSION}"
    - ALPINE_VERSION=$(echo $NODE_DIR | cut -d'/' -f2)
    - FINAL_IMAGE="$IMAGE_NAME:node-${NODE_VERSION}-${ALPINE_VERSION}"
    - echo "Building image - $FINAL_IMAGE"
    
    - export DOCKER_AUTH_CONFIG=/kaniko/.docker

    # Run Kaniko to build and push
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${NODE_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${NODE_DIR}/Dockerfile"
      --destination "${FINAL_IMAGE}"
 
  rules:
    - changes:
        - "${NODE_DIR}/Dockerfile"
  when: manual      

# Step 3: Smoke Test in Kubernetes
smoke_test:
  stage: smoke_test
  image:
    name: bitnami/kubectl:latest 
    entrypoint: [""]
  parallel:
    matrix:
      - NODE_DIR: $NODE_MATRIX  # Use dynamically generated list

  variables:
    KUBECONFIG: ".kube/config"

  before_script:
    - mkdir -p .kube
    - echo "$KUBE_CONFIG" | base64 -d > .kube/config

  script: 
    - echo "Testing Image for NODE_DIR - $NODE_DIR"
    
    - NODE_VERSION=$(awk '/ENV NODE_VERSION/{print $3}' $NODE_DIR/Dockerfile | tr -d '[:space:]')
    - ALPINE_VERSION=$(echo $NODE_DIR | cut -d'/' -f2)
    - FINAL_IMAGE="$IMAGE_NAME:node-${NODE_VERSION}-${ALPINE_VERSION}"
    - echo "Testing image - $FINAL_IMAGE"

    # Ensure old pod is deleted
    - kubectl get pod test-node-version > /dev/null 2>&1 && kubectl delete pod test-node-version || echo "Pod test-node-version not found"
    
    # Run the container
    - kubectl run test-node-version --image=${FINAL_IMAGE} --restart=Never -- sh -c "echo 'Node Version:' && node -v && echo 'NPM Version:' && npm -v && echo 'Alpine Release:' && cat /etc/alpine-release"

    # Wait until the pod is running before fetching logs
    - sleep 10
    - while [[ $(kubectl get pod test-node-version -o jsonpath='{.status.phase}') != "Running" ]]; do echo "Waiting for pod..."; sleep 5; done
    
    # Store logs in JSON format
    - kubectl logs test-node-version > $NODE_DIR/versions.txt
    - jq -R -s 'split("\n") | map(select(length > 0)) | {versions: .}' $NODE_DIR/versions.txt > $NODE_DIR/versions.json

    # Cleanup
    - kubectl delete pod test-node-version

  artifacts:
    paths:
      - $NODE_DIR/versions.json

  rules:
    - changes:
        - "${NODE_DIR}/Dockerfile"
