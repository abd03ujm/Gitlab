stages:
  - build
  - smoke_test
variables:
  ARTIFACTORY_USER: 2501440
  ARTIFACTORY_URL: "https://docker.hyattdev.com"
  #IMAGE_NAME: docker.hyattdev.com/docker/alpine-node
  IMAGE_NAME: docker.hyattdev.com/docker/poc/base-images/alpine
  POD_NAME: ${NODE_VERSION}-${ALPINE_VERSION}

  
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  parallel:
    matrix:
    - NODE_DIR: ["18/alpine3.20", "18/alpine3.21", "20/alpine3.20", "20/alpine3.21", "22/alpine3.20", "22/alpine3.21"]
    

  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$ARTIFACTORY_URL\":{\"username\":\"$ARTIFACTORY_USER\",\"password\":\"$ARTIFACTORY_PASSWORD\"}}}" > /kaniko/.docker/config.json

  script: 
    - echo "CI_PROJECT_DIR - ${CI_PROJECT_DIR}"
    - echo "NODE_DIR - ${NODE_DIR}"
    - echo "Checking Dockerfile Path - ${CI_PROJECT_DIR}/${NODE_DIR}/Dockerfile"
    - ls -al "${CI_PROJECT_DIR}/${NODE_DIR}"
    ##- echo "${ARTIFACTORY_PASSWORD}" | docker login ${ARTIFACTORY_URL} -u "${ARTIFACTORY_USER}" --password-stdin
    - NODE_VERSION=$(awk '/ENV NODE_VERSION/{print $3}' $NODE_DIR/Dockerfile | tr -d '[:space:]') 
    - echo  "NODE_VERSION - ${NODE_VERSION}"
    - ALPINE_VERSION=$(echo $NODE_DIR | cut -d'/' -f2) # Extract alpine version (3.18, 3.19, 3.20)
    - FINAL_IMAGE="$IMAGE_NAME:node-${NODE_VERSION}-${ALPINE_VERSION}" # Construct the final tag
    - echo Building image - "$FINAL_IMAGE"
    - echo docker build -t "$FINAL_IMAGE" -f "$NODE_DIR/Dockerfile"
    - ls -a /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - export DOCKER_AUTH_CONFIG=/kaniko/.docker

    #Run Kaniko to build and push
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$ARTIFACTORY_URL\":{\"username\":\"$ARTIFACTORY_USER\",\"password\":\"$ARTIFACTORY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/${NODE_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/${NODE_DIR}/Dockerfile"
      --destination "${FINAL_IMAGE}"
 
  rules:
    - changes:
        - "${NODE_DIR}/Dockerfile"
  when: manual      
smoke_test:
  stage: smoke_test
  image:
    name: bitnami/kubectl:latest 
    entrypoint: [""]
  parallel:
    matrix:
    - NODE_DIR: ["18/alpine3.20", "18/alpine3.21", "20/alpine3.20", "20/alpine3.21", "22/alpine3.20", "22/alpine3.21"]      
      
  variables:
    KUBECONFIG: ".kube/config"

  before_script:
    # - mkdir -p /kaniko/.docker
    # - echo "{\"auths\":{\"$ARTIFACTORY_URL\":{\"username\":\"$ARTIFACTORY_USER\",\"password\":\"$ARTIFACTORY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - mkdir -p .kube
    - echo "$KUBE_CONFIG" | base64 -d > .kube/config

  script: 

    - echo The NODE_DIR values are - $NODE_DIR
    - NODE_VERSION=$(awk '/ENV NODE_VERSION/{print $3}' $NODE_DIR/Dockerfile | tr -d '[:space:]') 
    - echo  "NODE_VERSION - ${NODE_VERSION}"
    - ALPINE_VERSION=$(echo $NODE_DIR | cut -d'/' -f2) 
    - FINAL_IMAGE="$IMAGE_NAME:node-${NODE_VERSION}-${ALPINE_VERSION}" 
    - echo Building image - "$FINAL_IMAGE"
    - echo checking node version from - $FINAL_IMAGE 
    - POD_NAME=test-node-version$(awk '/ENV NODE_VERSION/{print $3}' $NODE_DIR/Dockerfile | tr -d '[:space:]' | sed 's/\./-/g')
    - kubectl get pod $POD_NAME- > /dev/null 2>&1 && kubectl delete pod $POD_NAME|| echo "Pod $POD_NAME not found"
    
    - kubectl run $POD_NAME --image=${FINAL_IMAGE}   -- sh -c "echo 'Node Version:' && node -v && echo 'NPM Version:' && npm -v && echo 'Alpine Release:' && cat /etc/alpine-release"
    - sleep 10
    #- kubectl logs test-node-version > $NODE_DIR/versions.txt
    - while [[ $(kubectl get pod test-node-version -o jsonpath='{.status.phase}') != "Running" ]]; do echo "Waiting for pod to be in Running state..."; sleep 30; done; kubectl logs test-node-version > $NODE_DIR/versions.txt
    - 'cat $NODE_DIR/versions.txt | jq -R -s ''split("\n") | map(select(length > 0)) | {versions: .}'' > $NODE_DIR/versions.json'
    - kubectl delete pod test-node-version
  artifacts:
    paths:
      - $NODE_DIR/versions.json

  rules:
    - changes:
        - "${NODE_DIR}/Dockerfile"
