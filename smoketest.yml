.image-smoketest:
  stage: smoke_test
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]

  variables:
    KUBECONFIG: ".kube/config"
  before_script:
    - mkdir -p .kube
    - echo "$KUBE_CONFIG" | base64 -d > .kube/config
  script:
    - SOFTWARE_VERSION=$(awk '/ENV SOFTWARE_VERSION/{print $3}' $DIR_STRUCTURE/manifest | tr -d '[:space:]' | sed 's|+|plus|g' | sed 's/\//-/g' | sed 's/\./-/g' | sed 's/-$//')
    - BUILD_VERSION=$(awk '/ENV BUILD_VERSION/{print $3}' $DIR_STRUCTURE/manifest | tr -d '[:space:]')
    - SOFTWARE_TYPE=$(awk '/ENV SOFTWARE_TYPE/{print $3}' $DIR_STRUCTURE/manifest | tr -d '[:space:]')
    - ALPINE_VERSION=$(echo $DIR_STRUCTURE | cut -d'/' -f2)
    - FINAL_IMAGE="$IMAGE_NAME:${ALPINE_VERSION}-${SOFTWARE_TYPE}${SOFTWARE_VERSION}-${BUILD_VERSION}"
    - POD_ALPINE=$(echo $DIR_STRUCTURE | sed 's/\//-/g' | sed 's/\./-/g' | sed 's/-$//')
    #- POD_NAME=test-${SOFTWARE_TYPE}-version$(awk '/ENV SOFTWARE_VERSION/{print $3}' $DIR_STRUCTURE/manifest | tr -d '[:space:]' | sed 's/\./-/g')
    - POD_NAME=test-${SOFTWARE_TYPE}-version$SOFTWARE_VERSION
    - echo $POD_NAME-alpine-$POD_ALPINE
    - kubectl get pod $POD_NAME-alpine-$POD_ALPINE > /dev/null 2>&1 && kubectl delete pod $POD_NAME-alpine-$POD_ALPINE || echo "Pod not found"
    - |
      if [ "$SOFTWARE_TYPE" = "node" ]; then
        kubectl run $POD_NAME-alpine-$POD_ALPINE --image=${FINAL_IMAGE} \
          -- sh -c "echo 'Node Version:' && node -v && echo 'NPM Version:' && npm -v && echo 'Alpine Release:' && cat /etc/alpine-release"
      elif [ "$SOFTWARE_TYPE" = "java" ]; then
        kubectl run $POD_NAME-alpine-$POD_ALPINE --image=${FINAL_IMAGE} \
          -- sh -c "echo 'Java Version:' && java -version && echo 'Alpine Release:' && cat /etc/alpine-release"
      else
        echo "Invalid SOFTWARE_TYPE. Valid values are 'node' or 'java'."
      fi
    #- while [[ $(kubectl get pod $POD_NAME-alpine-$POD_ALPINE -o jsonpath='{.status.phase}') != "Running" ]]; do echo "Waiting for pod to be in Running state...";  done; kubectl logs $POD_NAME-alpine-$POD_ALPINE > $DIR_STRUCTURE/versions.txt
    - | 
      while [[ $(kubectl get pod $POD_NAME-alpine-$POD_ALPINE -o jsonpath='{.status.phase}') != "Running" || \
         $(kubectl get pod $POD_NAME-alpine-$POD_ALPINE -o jsonpath='{.status.phase}') != "Completed" ]]; do
         echo "Waiting for pod to be in Running or Succeeded state...";
         sleep 5;  # Wait for 5 seconds before checking again
      done;     
    - kubectl logs $POD_NAME-alpine-$POD_ALPINE > $DIR_STRUCTURE/versions.txt
    - 'cat $DIR_STRUCTURE/versions.txt | jq -R -s ''split("\n") | map(select(length > 0)) | { "Node Version": .[1], "NPM Version": .[3], "Alpine Release": .[5] }'' > $DIR_STRUCTURE/versions.json'
    - kubectl delete pod $POD_NAME-alpine-$POD_ALPINE
  artifacts:
    paths:
      - $DIR_STRUCTURE/versions.json
  rules:
    - changes:
        - "${DIR_STRUCTURE}/manifest"
        - "${DIR_STRUCTURE}/Dockerfile"

  
